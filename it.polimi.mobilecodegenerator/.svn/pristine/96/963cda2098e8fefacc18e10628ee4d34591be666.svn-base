«IMPORT metamodel»

«DEFINE attributesDeclarations FOR ViewController-»
«IF fotocameraController!=null-»
private Button fotocameraButton;
private static final int IMAGE_CAPTURE_ACTIVITY_REQUEST_CODE = 100;
«ENDIF-»
«IF videocameraController!=null-»
private Button videocameraButton;
private static final int VIDEO_CAPTURE_ACTIVITY_REQUEST_CODE = 200;
«ENDIF-»
«ENDDEFINE-»

«DEFINE onCreate FOR ViewController-»
«IF fotocameraController!=null-»
fotocameraButton = (Button) this.findViewById(R.id.fotocameraButton);
fotocameraButton.setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View v) {
		Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		startActivityForResult(takePictureIntent, IMAGE_CAPTURE_ACTIVITY_REQUEST_CODE);
	}
});
«ENDIF-»

«IF videocameraController!=null-»
videocameraButton = (Button) this.findViewById(R.id.videocameraButton);
videocameraButton.setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View v) {
		Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
		startActivityForResult(takeVideoIntent, VIDEO_CAPTURE_ACTIVITY_REQUEST_CODE);
	}
});
«ENDIF-»
«ENDDEFINE-»

«DEFINE camera FOR ViewController-»
«IF fotocameraController!=null || videocameraController!=null-»
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {        
	if(resultCode == Activity.RESULT_OK) {
		«IF fotocameraController!=null-»
		if(requestCode == IMAGE_CAPTURE_ACTIVITY_REQUEST_CODE) {
			Bitmap photo = (Bitmap) data.getExtras().get("data");
			String localImageFileUri = this.copyImageInImagesFolder(photo);
            //TODO use the photo
            «IF !fotocameraController.imageViewId.matches("")-»
            «fotocameraController.imageViewId».setImageBitmap(photo);
            «ENDIF-»
		}
		«ENDIF-»
		«IF videocameraController!=null-»
		if(requestCode == VIDEO_CAPTURE_ACTIVITY_REQUEST_CODE) {
			Uri videoFileUri = data.getData();
			String localVideoFileUri = this.copyVideoInVideosFolder(videoFileUri);
        	//TODO use the video
        	«IF !videocameraController.videoViewId.matches("")-»
        	«videocameraController.videoViewId».setVideoURI(videoFileUri);
            «videocameraController.videoViewId».setMediaController(new MediaController(this));
            «videocameraController.videoViewId».requestFocus();
            «videocameraController.videoViewId».start();
            «ENDIF-»
		}
		«ENDIF-»
	}
	else if(resultCode == Activity.RESULT_CANCELED) {
    	//User cancelled the media capture
    	//TODO implement the action
    }
}
«IF fotocameraController!=null-»
private String copyImageInImagesFolder(Bitmap image){
	String localImagePath = null;
	try {
		String imagesPath = getFilesDir().getAbsolutePath() + "/images";
	    File imagesDirectory = new File(imagesPath);
	    imagesDirectory.mkdir();
	    String filename = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date())+".png";
	    localImagePath = imagesPath+"/"+filename;
	    File localImageFile = new File(localImagePath);
	    FileOutputStream outputStream = new FileOutputStream(localImageFile);
		image.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
		outputStream.close();
	}
	catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return localImagePath;
}
«ENDIF-»
«IF videocameraController!=null-»
private String copyVideoInVideosFolder(Uri sourceVideoFileUri){
	String localVideoPath = null;
	try {
		AssetFileDescriptor videoAsset = getContentResolver().openAssetFileDescriptor(sourceVideoFileUri, "r");
	    FileInputStream fis = videoAsset.createInputStream();
	    String videosPath = getFilesDir().getAbsolutePath() + "/videos";
	    File videosDirectory = new File(videosPath);
	    videosDirectory.mkdir();
	    String filename = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date())+".3gp";
	    localVideoPath = videosPath+"/"+filename;
	    File localVideoFile = new File(localVideoPath);
	    FileOutputStream fos = new FileOutputStream(localVideoFile);			    
	    byte[] buf = new byte[10240];
	    int len;
	    while ((len = fis.read(buf)) > 0) {
	        fos.write(buf, 0, len);
	    }
	    fis.close();
	    fos.close();
	}
	catch (IOException e) {
	   	// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return localVideoPath;
}
«ENDIF-»
«ENDIF-»
«ENDDEFINE-»


